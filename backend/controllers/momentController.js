import Moment from '../models/Moment.js';
import { logActivity } from '../middleware/activityLogger.js';
import {drive, extractFileIdFromUrl, extractFolderIdFromUrl, getDirectViewUrl, createSubfolder, getFilesFromFolder } from '../utils/driveUtils.js';
import { google } from 'googleapis';Â 

export const momentController = {
Â  getAllMoments: async (req, res) => {
Â  Â  try {
Â  Â  Â  const moments = await Moment.find().sort({ order: -1, createdAt: -1 });
Â  Â  Â  res.json(moments);
Â  Â  } catch (error) {
Â  Â  Â  res.status(500).json({ message: 'Failed to fetch moments', error: error.message });
Â  Â  }
Â  },

Â  addYouTubeMoment: async (req, res) => {
Â  Â  try {
Â  Â  Â  const { title, url } = req.body;
Â  Â  Â  const maxOrder = await Moment.findOne().sort('-order');
Â  Â  Â  const order = maxOrder ? maxOrder.order + 1 : 0;
Â  Â  Â  const momentData = {
Â  Â  Â  Â  title,
Â  Â  Â  Â  type: 'youtube',
Â  Â  Â  Â  url,
Â  Â  Â  Â  order,
Â  Â  Â  Â  createdBy: req.user.registerId,
Â  Â  Â  };

Â  Â  Â  const moment = await Moment.create(momentData);

Â  Â  Â  await logActivity(
Â  Â  Â  Â  req,
Â  Â  Â  Â  'CREATE',
Â  Â  Â  Â  'Moment',
Â  Â  Â  Â  moment._id.toString(),
Â  Â  Â  Â  { before: null, after: moment.toObject() },
Â  Â  Â  Â  `YouTube moment "${title}" added by ${req.user.name}`
Â  Â  Â  );

Â  Â  Â  res.status(201).json(moment);
Â  Â  } catch (error) {
Â  Â  Â  res.status(500).json({ message: 'Failed to add YouTube moment', error: error.message });
Â  Â  }
Â  },


Â  // Add Drive Moment (supports both single file and folder)
Â  addDriveMoment: async (req, res) => {
Â  Â  try {
Â  Â  Â  const { title, url } = req.body;

Â  Â  Â  // Detect folder or file
Â  Â  Â  const folderId = extractFolderIdFromUrl(url);
Â  Â  Â  const fileId = extractFileIdFromUrl(url);

Â  Â  Â  if (!folderId && !fileId) {
Â  Â  Â  Â  return res.status(400).json({ message: 'Invalid Google Drive URL' });
Â  Â  Â  }

Â  Â  Â  let mediaFiles = [];
Â  Â  Â  let folderRef = null;

Â  Â  Â  // ðŸ“‚ If it's a folder, fetch all media files (metadata only)
Â  Â  Â  if (folderId) {
Â  Â  Â  Â  const files = await getFilesFromFolder(folderId);
Â  Â  Â  Â  if (!files.length) {
Â  Â  Â  Â  Â  return res.status(400).json({ message: 'No files found in the folder' });
Â  Â  Â  Â  }

Â  Â  Â  Â  mediaFiles = files.map((file, i) => ({
Â  Â  Â  Â  Â  name: file.name,
Â  Â  Â  Â  Â  url: `https://drive.google.com/uc?export=view&id=${file.id}`,
Â  Â  Â  Â  Â  type: file.mimeType.startsWith('image/') ? 'image' : 'video',
Â  Â  Â  Â  Â  order: i,
Â  Â  Â  Â  Â  mediaPublicId: file.id
Â  Â  Â  Â  }));

Â  Â  Â  Â  folderRef = folderId;
Â  Â  Â  }

Â  Â  Â  // ðŸ“„ If it's a single file, just add that
Â  Â  Â  else if (fileId) {
Â  Â  Â  Â  const fileResponse = await drive.files.get({
Â  Â  Â  Â  Â  fileId: fileId,
Â  Â  Â  Â  Â  fields: 'id, name, mimeType, webViewLink'
Â  Â  Â  Â  });
Â  Â  Â  Â  const file = fileResponse.data;

Â  Â  Â  Â  mediaFiles = [{
Â  Â  Â  Â  Â  name: file.name,
Â  Â  Â  Â  Â  url: `https://drive.google.com/uc?export=view&id=${file.id}`,
Â  Â  Â  Â  Â  type: file.mimeType.startsWith('image/') ? 'image' : 'video',
Â  Â  Â  Â  Â  order: 0,
Â  Â  Â  Â  Â  mediaPublicId: file.id
Â  Â  Â  Â  }];
Â  Â  Â  }

Â  Â  Â  // Determine order for the new moment
Â  Â  Â  const maxOrder = await Moment.findOne().sort('-order');
Â  Â  Â  const order = maxOrder ? maxOrder.order + 1 : 0;

Â  Â  Â  const momentData = {
Â  Â  Â  Â  title,
Â  Â  Â  Â  type: 'drive',
Â  Â  Â  Â  url, // keep original link (file or folder)
Â  Â  Â  Â  mediaFiles,
Â  Â  Â  Â  order,
Â  Â  Â  Â  subfolderId: folderRef,
Â  Â  Â  Â  createdBy: req.user.registerId,
Â  Â  Â  };

Â  Â  Â  const moment = await Moment.create(momentData);

Â  Â  Â  await logActivity(
Â  Â  Â  Â  req,
Â  Â  Â  Â  'CREATE',
Â  Â  Â  Â  'Moment',
Â  Â  Â  Â  moment._id.toString(),
Â  Â  Â  Â  { before: null, after: moment.toObject() },
Â  Â  Â  Â  folderRef
Â  Â  Â  Â  Â  ? `Drive folder moment "${title}" added by ${req.user.name}`
Â  Â  Â  Â  Â  : `Drive file moment "${title}" added by ${req.user.name}`
Â  Â  Â  );

Â  Â  Â  res.status(201).json(moment);
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error adding Drive moment:', error);
Â  Â  Â  res.status(500).json({ message: 'Failed to add Drive moment', error: error.message });
Â  Â  }
Â  },

Â Â 
Â  // Sync (refresh) Drive Moment â€” only if it's folder-based
Â  syncDriveFolderMoment: async (req, res) => {
Â  Â  try {
Â  Â  Â  const { id } = req.params;
Â  Â  Â  const moment = await Moment.findById(id);
Â  Â  Â  if (!moment) return res.status(404).json({ message: 'Moment not found' });

Â  Â  Â  // If not a Drive moment or not linked to a folder, skip
Â  Â  Â  if (moment.type !== 'drive') {
Â  Â  Â  Â  return res.status(400).json({ message: 'This moment is not a Drive type' });
Â  Â  Â  }

Â  Â  Â  // Only sync if linked to a folder
Â  Â  Â  if (!moment.subfolderId) {
Â  Â  Â  Â  return res.status(400).json({ message: 'This Drive moment is a single file, sync not applicable' });
Â  Â  Â  }

Â  Â  Â  const before = moment.toObject();

Â  Â  Â  // Fetch latest files from the folder
Â  Â  Â  const files = await getFilesFromFolder(moment.subfolderId);

Â  Â  Â  if (!files || files.length === 0) {
Â  Â  Â  Â  return res.status(404).json({ message: 'No files found in the linked Drive folder' });
Â  Â  Â  }

Â  Â  Â  // Prepare updated media metadata
Â  Â  Â  const updatedMedia = files.map((file, i) => ({
Â  Â  Â  Â  name: file.name,
Â  Â  Â  Â  url: `https://drive.google.com/uc?export=view&id=${file.id}`,
Â  Â  Â  Â  type: file.mimeType.startsWith('image/') ? 'image' : 'video',
Â  Â  Â  Â  order: i,
Â  Â  Â  Â  mediaPublicId: file.id
Â  Â  Â  }));

Â  Â  Â  // Update moment
Â  Â  Â  moment.mediaFiles = updatedMedia;
Â  Â  Â  await moment.save();

Â  Â  Â  await logActivity(
Â  Â  Â  Â  req,
Â  Â  Â  Â  'UPDATE',
Â  Â  Â  Â  'Moment',
Â  Â  Â  Â  moment._id.toString(),
Â  Â  Â  Â  before,
Â  Â  Â  Â  `Drive folder moment "${moment.title}" synced by ${req.user.name}`
Â  Â  Â  );

Â  Â  Â  res.json({ message: 'Drive folder synced successfully', moment });
Â  Â  } catch (error) {
Â  Â  Â  console.error('Error syncing Drive moment:', error);
Â  Â  Â  res.status(500).json({ message: 'Failed to sync Drive moment', error: error.message });
Â  Â  }
Â  },

Â  startuploadMediaMoment: async (req, res) => {
Â  Â  try {
Â  Â  Â  const { title } = req.body;
Â  Â  Â  const maxOrder = await Moment.findOne().sort('-order');
Â  Â  Â  const order = maxOrder ? maxOrder.order + 1 : 0;

Â  Â  Â  const subfolderName = `${title}_${Date.now()}`;
Â  Â  Â  const subfolderId = await createSubfolder(process.env.GOOGLE_DRIVE_FOLDER_ID, subfolderName);

Â  Â  Â  const moment = await Moment.create({
Â  Â  Â  Â  title,
Â  Â  Â  Â  type: 'upload',
Â  Â  Â  Â  mediaFiles: [],
Â  Â  Â  Â  order,
Â  Â  Â  Â  subfolderName,
Â  Â  Â  Â  subfolderId,
Â  Â  Â  Â  createdBy: req.user.registerId,
Â  Â  Â  });

Â  Â  Â  const jwt = new google.auth.JWT({
Â  Â  Â  Â  email: JSON.parse(process.env.GOOGLE_DRIVE_CREDENTIALS).client_email,
Â  Â  Â  Â  key: JSON.parse(process.env.GOOGLE_DRIVE_CREDENTIALS).private_key,
Â  Â  Â  Â  scopes: ['https://www.googleapis.com/auth/drive'],
Â  Â  Â  });
Â  Â  Â  const token = await jwt.authorize();

Â  Â  Â  res.json({ momentId: moment._id, subfolderId, accessToken: token.access_token });
Â  Â  } catch (err) {
Â  Â  Â  res.status(500).json({ message: 'Failed to start upload', error: err.message });
Â  Â  }
Â  },

Â  completeuploadMediaMoment: async (req, res) => {
Â  Â  try {
Â  Â  Â  const { momentId, mediaFiles } = req.body;
Â  Â  Â  const moment = await Moment.findById(momentId);
Â  Â  Â  if (!moment) return res.status(404).json({ message: 'Moment not found' });

Â  Â  Â  const before = moment.toObject();
Â  Â  Â  const maxOrder = moment.mediaFiles.length > 0 ? Math.max(...moment.mediaFiles.map(m => m.order || 0)) : -1;

Â  Â  Â  for (let i = 0; i < mediaFiles.length; i++) {
Â  Â  Â  Â  const file = mediaFiles[i];
Â  Â  Â  Â  moment.mediaFiles.push({
Â  Â  Â  Â  Â  name: file.name,
Â  Â  Â  Â  Â  url: file.url,
Â  Â  Â  Â  Â  type: file.type,
Â  Â  Â  Â  Â  order: maxOrder + i + 1,
Â  Â  Â  Â  Â  mediaPublicId: file.id || file.mediaPublicId,
Â  Â  Â  Â  });
Â  Â  Â  }

Â  Â  Â  await moment.save();

Â  Â  Â  await logActivity(req, 'UPDATE', 'Moment', moment._id, before, `${mediaFiles.length} media files added to "${moment.title}" by ${req.user.name}`);
Â  Â  Â  const updated = await Moment.findById(momentId);
Â  Â  Â  res.json({ message: 'Upload completed', moment: updated });
Â  Â  } catch (err) {
Â  Â  Â  res.status(500).json({ message: 'Failed to complete upload', error: err.message });
Â  Â  }
Â  },

Â  addCopyToServiceDriveMoment: async (req, res) => {
Â  Â  try {
Â  Â  Â  const { title, url } = req.body;

Â  Â  Â  const folderId = extractFolderIdFromUrl(url);
Â  Â  Â  const fileId = extractFileIdFromUrl(url);

Â  Â  Â  if (!folderId && !fileId) {
Â  Â  Â  Â  return res.status(400).json({ message: 'Invalid Google Drive URL' });
Â  Â  Â  }

Â  Â  Â  let filesToProcess = [];

Â  Â  Â  if (folderId) {
Â  Â  Â  Â  filesToProcess = await getFilesFromFolder(folderId);
Â  Â  Â  } else if (fileId) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  const fileResponse = await drive.files.get({
Â  Â  Â  Â  Â  Â  fileId: fileId,
Â  Â  Â  Â  Â  Â  fields: 'id, name, mimeType, webViewLink'
Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  filesToProcess = [fileResponse.data];
Â  Â  Â  Â  } catch (error) {
Â  Â  Â  Â  Â  return res.status(400).json({ message: 'Unable to access the file. Please check permissions.' });
Â  Â  Â  Â  }
Â  Â  Â  }

Â  Â  Â  if (filesToProcess.length === 0) {
Â  Â  Â  Â  return res.status(400).json({ message: 'No media files found' });
Â  Â  Â  }

Â  Â  Â  const maxOrder = await Moment.findOne().sort('-order');
Â  Â  Â  const order = maxOrder ? maxOrder.order + 1 : 0;

Â  Â  Â  const subfolderName = `${title}_${Date.now()}`;
Â  Â  Â  const subfolderId = await createSubfolder(process.env.GOOGLE_DRIVE_FOLDER_ID, subfolderName);

Â  Â  Â  const copyPromises = filesToProcess.map(async (file, i) => {
Â  Â  Â  Â  const copiedFile = await drive.files.copy({
Â  Â  Â  Â  Â  fileId: file.id,
Â  Â  Â  Â  Â  requestBody: {
Â  Â  Â  Â  Â  Â  name: file.name,
Â  Â  Â  Â  Â  Â  parents: [subfolderId],
Â  Â  Â  Â  Â  },
Â  Â  Â  Â  });

Â  Â  Â  Â  await drive.permissions.create({
Â  Â  Â  Â  Â  fileId: copiedFile.data.id,
Â  Â  Â  Â  Â  requestBody: {
Â  Â  Â  Â  Â  Â  role: 'reader',
Â  Â  Â  Â  Â  Â  type: 'anyone',
Â  Â  Â  Â  Â  },
Â  Â  Â  Â  });

Â  Â  Â  Â  const directUrl = `https://drive.google.com/uc?export=view&id=${copiedFile.data.id}`;
Â  Â  Â  Â Â 
Â  Â  Â  Â  return {
Â  Â  Â  Â  Â  name: file.name,
Â  Â  Â  Â  Â  url: directUrl,
Â  Â  Â  Â  Â  type: file.mimeType.startsWith('image/') ? 'image' : 'video',
Â  Â  Â  Â  Â  order: i,
Â  Â  Â  Â  Â  mediaPublicId: copiedFile.data.id
Â  Â  Â  Â  };
Â  Â  Â  });

Â  Â  Â  const mediaFiles = await Promise.all(copyPromises);

Â  Â  Â  const momentData = {
Â  Â  Â  Â  title,
Â  Â  Â  Â  type: 'upload',
Â  Â  Â  Â  mediaFiles,
Â  Â  Â  Â  order,
Â  Â  Â  Â  subfolderName,
Â  Â  Â  Â  subfolderId,
Â  Â  Â  Â  createdBy: req.user.registerId,
Â  Â  Â  };

Â  Â  Â  const moment = await Moment.create(momentData);

Â  Â  Â  await logActivity(
Â  Â  Â  Â  req,
Â  Â  Â  Â  'CREATE',
Â  Â  Â  Â  'Moment',
Â  Â  Â  Â  moment._id.toString(),
Â  Â  Â  Â  { before: null, after: moment.toObject() },
Â  Â  Â  Â  `Drive moment "${title}" with ${filesToProcess.length} files copied and added by ${req.user.name}`
Â  Â  Â  );

Â  Â  Â  res.status(201).json(moment);
Â  Â  } catch (error) {
Â  Â  Â  res.status(500).json({ message: 'Failed to copy and add drive moment', error: error.message });
Â  Â  }
Â  },

Â  updateMomentOrder: async (req, res) => {
Â  Â  try {
Â  Â  Â  const { moments } = req.body;
Â  Â  Â  const originalMoments = await Moment.find();
Â  Â  Â  const originalData = originalMoments.map(m => m.toObject());

Â  Â  Â  for (const moment of moments) {
Â  Â  Â  Â  await Moment.findByIdAndUpdate(moment._id, { order: moment.order });
Â  Â  Â  }

Â  Â  Â  const updatedMoments = await Moment.find().sort({ order: -1, createdAt: -1 });

Â  Â  Â  await logActivity(
Â  Â  Â  Â  req,
Â  Â  Â  Â  'UPDATE',
Â  Â  Â  Â  'Moment',
Â  Â  Â  Â  'moment-order',
Â  Â  Â  Â  { before: originalData, after: updatedMoments },
Â  Â  Â  Â  `Moment order updated by ${req.user.name}`
Â  Â  Â  );

Â  Â  Â  res.json({ message: 'Moment order updated successfully', moments: updatedMoments });
Â  Â  } catch (error) {
Â  Â  Â  res.status(500).json({ message: 'Failed to update moment order' });
Â  Â  }
Â  },

Â  updateMomentTitle: async (req, res) => {
Â  Â  try {
Â  Â  Â  const { id } = req.params;
Â  Â  Â  const { title } = req.body;

Â  Â  Â  if (!title || typeof title !== 'string' || title.trim() === '') {
Â  Â  Â  Â  return res.status(400).json({ message: 'Invalid title' });
Â  Â  Â  }

Â  Â  Â  const moment = await Moment.findById(id);
Â  Â  Â  if (!moment) {
Â  Â  Â  Â  return res.status(404).json({ message: 'Moment not found' });
Â  Â  Â  }

Â  Â  Â  const originalData = moment.toObject();
Â  Â  Â  moment.title = title;
Â  Â  Â  await moment.save();

Â  Â  Â  await logActivity(
Â  Â  Â  Â  req,
Â  Â  Â  Â  'UPDATE',
Â  Â  Â  Â  'Moment',
Â  Â  Â  Â  moment._id.toString(),
Â  Â  Â  Â  { before: originalData, after: moment.toObject() },
Â  Â  Â  Â  `Moment title updated to "${title}" by ${req.user.name}`
Â  Â  Â  );

Â  Â  Â  res.json({ message: 'Moment title updated successfully', moment });
Â  Â  } catch (error) {
Â  Â  Â  res.status(500).json({ message: 'Failed to update moment title', error: error.message });
Â  Â  }
Â  },

Â  deleteMoment: async (req, res) => {
Â  Â  try {
Â  Â  Â  const moment = await Moment.findById(req.params.id);
Â  Â  Â  if (!moment) {
Â  Â  Â  Â  return res.status(404).json({ message: 'Moment not found' });
Â  Â  Â  }

Â  Â  Â  const originalData = moment.toObject();

Â  Â  Â  // If the moment has an associated subfolder, move the entire folder to trash
Â  Â  Â  if (moment.subfolderId) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  // Move the subfolder and all its contents to trash
Â  Â  Â  Â  Â  await drive.files.update({
Â  Â  Â  Â  Â  Â  fileId: moment.subfolderId,
Â  Â  Â  Â  Â  Â  requestBody: { trashed: true }, // Move to trash instead of permanent delete
Â  Â  Â  Â  Â  });
Â  Â  Â  Â  } catch (driveError) {
Â  Â  Â  Â  Â  console.error('Failed to move subfolder to Google Drive trash:', driveError);
Â  Â  Â  Â  }
Â  Â  Â  }

Â  Â  Â  // If it's a single file moment (e.g., legacy 'media' type) not associated with a folder
Â  Â  Â  if (moment.type === 'media' && moment.url) {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  const fileId = extractFileIdFromUrl(moment.url);
Â  Â  Â  Â  Â  if (fileId) {
Â  Â  Â  Â  Â  Â  await drive.files.update({
Â  Â  Â  Â  Â  Â  Â  fileId: fileId,
Â  Â  Â  Â  Â  Â  Â  requestBody: { trashed: true }, // Move to trash instead of permanent delete
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  } catch (driveError) {
Â  Â  Â  Â  Â  console.error('Failed to move file from Google Drive to trash:', driveError);
Â  Â  Â  Â  }
Â  Â  Â  }
Â  Â  Â Â 
Â  Â  Â  await logActivity(
Â  Â  Â  Â  req,
Â  Â  Â  Â  'DELETE',
Â  Â  Â  Â  'Moment',
Â  Â  Â  Â  moment._id.toString(),
Â  Â  Â  Â  { before: originalData, after: null },
Â  Â  Â  Â  `Moment "${moment.title}" deleted by ${req.user.name}`
Â  Â  Â  );

Â  Â  Â  await Moment.findByIdAndDelete(req.params.id);

Â  Â  Â  res.json({ message: 'Moment deleted successfully' });
Â  Â  } catch (error) {
Â  Â  Â  res.status(500).json({ message: 'Failed to delete moment', error: error.message });
Â  Â  }
Â  },
};
